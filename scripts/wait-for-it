#! /usr/bin/python2
# -*- coding: utf-8-unix -*-

# Checks waits for the following to happen before moving on to the
# passed command:
#
# - Consul is up and populated
#
# author: torstein@escenic.com

import logging as log
import os
import sys
import time

from gluu_config import ConfigManager

MAX_WAIT_SECONDS = 300
SLEEP_DURATION = 3
LAST_CONFIG_KEY = "oxauth_openid_jwks_fn"

LICENSE_ACK = """
# ========================================================================================= #
# Gluu License Agreement: https://github.com/GluuFederation/gluu-docker/blob/3.1.4/LICENSE. #
# The use of Gluu Server Docker Edition is subject to the Gluu Support License.             #
# ========================================================================================= #

"""


def wait_for_config(config_manager):
    for i in range(0, MAX_WAIT_SECONDS, SLEEP_DURATION):
        try:
            if config_manager.get(LAST_CONFIG_KEY):
                log.info("Config backend is ready.")
                return
        except Exception as exc:
            log.warn(exc)
            log.warn(
                "Config backend is not ready, retrying in {} seconds.".format(
                    SLEEP_DURATION))
        time.sleep(SLEEP_DURATION)

    log.error("Config backend is not ready after {} seconds.".format(MAX_WAIT_SECONDS))
    sys.exit(1)


def execute_passed_command(command_list):
    log.info(
        "Now executing the arguments passed to " +
        sys.argv[0] +
        ": " +
        " ".join(command_list)
    )
    os.system(" ".join(command_list))


def configure_logger():
    # When debugging wait-for-it, set level=log.INFO or pass
    # --log=DEBUG on the command line.
    log.basicConfig(
        level=log.INFO,
        format='%(asctime)s [%(levelname)s] [%(filename)s] - %(message)s'
    )


if __name__ == "__main__":
    print LICENSE_ACK

    configure_logger()

    log.info(
        "Hi world, waiting for config backend to be ready before " +
        "running " + " ".join(sys.argv[1:])
    )
    # consul = consulate.Consul(host=GLUU_KV_HOST, port=GLUU_KV_PORT)
    config_manager = ConfigManager()
    wait_for_config(config_manager)
    execute_passed_command(sys.argv[1:])
